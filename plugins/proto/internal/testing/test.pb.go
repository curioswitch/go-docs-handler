// Copyright 2017 LINE Corporation
//
// LINE Corporation licenses this file to you under the Apache License,
// version 2.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at:
//
//   https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.

// Copyright 2015, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.1
// source: test.proto

package testing

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestEnum int32

const (
	TestEnum_ZERO TestEnum = 0
	TestEnum_ONE  TestEnum = 1
	TestEnum_TWO  TestEnum = 2
)

// Enum value maps for TestEnum.
var (
	TestEnum_name = map[int32]string{
		0: "ZERO",
		1: "ONE",
		2: "TWO",
	}
	TestEnum_value = map[string]int32{
		"ZERO": 0,
		"ONE":  1,
		"TWO":  2,
	}
)

func (x TestEnum) Enum() *TestEnum {
	p := new(TestEnum)
	*p = x
	return p
}

func (x TestEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_test_proto_enumTypes[0].Descriptor()
}

func (TestEnum) Type() protoreflect.EnumType {
	return &file_test_proto_enumTypes[0]
}

func (x TestEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestEnum.Descriptor instead.
func (TestEnum) EnumDescriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{0}
}

type TestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bool     bool                `protobuf:"varint,1,opt,name=bool,proto3" json:"bool,omitempty"`
	Int32    int32               `protobuf:"varint,2,opt,name=int32,proto3" json:"int32,omitempty"`
	Int64    int64               `protobuf:"varint,3,opt,name=int64,proto3" json:"int64,omitempty"`
	Uint32   uint32              `protobuf:"varint,4,opt,name=uint32,proto3" json:"uint32,omitempty"`
	Uint64   uint64              `protobuf:"varint,5,opt,name=uint64,proto3" json:"uint64,omitempty"`
	Sint32   int32               `protobuf:"zigzag32,6,opt,name=sint32,proto3" json:"sint32,omitempty"`
	Sint64   int64               `protobuf:"zigzag64,7,opt,name=sint64,proto3" json:"sint64,omitempty"`
	Fixed32  uint32              `protobuf:"fixed32,8,opt,name=fixed32,proto3" json:"fixed32,omitempty"`
	Fixed64  uint64              `protobuf:"fixed64,9,opt,name=fixed64,proto3" json:"fixed64,omitempty"`
	Float    float32             `protobuf:"fixed32,10,opt,name=float,proto3" json:"float,omitempty"`
	Double   float64             `protobuf:"fixed64,11,opt,name=double,proto3" json:"double,omitempty"`
	String_  string              `protobuf:"bytes,12,opt,name=string,proto3" json:"string,omitempty"`
	Bytes    []byte              `protobuf:"bytes,13,opt,name=bytes,proto3" json:"bytes,omitempty"`
	TestEnum TestEnum            `protobuf:"varint,14,opt,name=test_enum,json=testEnum,proto3,enum=armeria.grpc.testing.TestEnum" json:"test_enum,omitempty"`
	Nested   *TestMessage_Nested `protobuf:"bytes,15,opt,name=nested,proto3" json:"nested,omitempty"`
	Strings  []string            `protobuf:"bytes,16,rep,name=strings,proto3" json:"strings,omitempty"`
	Map      map[string]int32    `protobuf:"bytes,17,rep,name=map,proto3" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Self     *TestMessage        `protobuf:"bytes,18,opt,name=self,proto3" json:"self,omitempty"`
}

func (x *TestMessage) Reset() {
	*x = TestMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMessage) ProtoMessage() {}

func (x *TestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMessage.ProtoReflect.Descriptor instead.
func (*TestMessage) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{0}
}

func (x *TestMessage) GetBool() bool {
	if x != nil {
		return x.Bool
	}
	return false
}

func (x *TestMessage) GetInt32() int32 {
	if x != nil {
		return x.Int32
	}
	return 0
}

func (x *TestMessage) GetInt64() int64 {
	if x != nil {
		return x.Int64
	}
	return 0
}

func (x *TestMessage) GetUint32() uint32 {
	if x != nil {
		return x.Uint32
	}
	return 0
}

func (x *TestMessage) GetUint64() uint64 {
	if x != nil {
		return x.Uint64
	}
	return 0
}

func (x *TestMessage) GetSint32() int32 {
	if x != nil {
		return x.Sint32
	}
	return 0
}

func (x *TestMessage) GetSint64() int64 {
	if x != nil {
		return x.Sint64
	}
	return 0
}

func (x *TestMessage) GetFixed32() uint32 {
	if x != nil {
		return x.Fixed32
	}
	return 0
}

func (x *TestMessage) GetFixed64() uint64 {
	if x != nil {
		return x.Fixed64
	}
	return 0
}

func (x *TestMessage) GetFloat() float32 {
	if x != nil {
		return x.Float
	}
	return 0
}

func (x *TestMessage) GetDouble() float64 {
	if x != nil {
		return x.Double
	}
	return 0
}

func (x *TestMessage) GetString_() string {
	if x != nil {
		return x.String_
	}
	return ""
}

func (x *TestMessage) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *TestMessage) GetTestEnum() TestEnum {
	if x != nil {
		return x.TestEnum
	}
	return TestEnum_ZERO
}

func (x *TestMessage) GetNested() *TestMessage_Nested {
	if x != nil {
		return x.Nested
	}
	return nil
}

func (x *TestMessage) GetStrings() []string {
	if x != nil {
		return x.Strings
	}
	return nil
}

func (x *TestMessage) GetMap() map[string]int32 {
	if x != nil {
		return x.Map
	}
	return nil
}

func (x *TestMessage) GetSelf() *TestMessage {
	if x != nil {
		return x.Self
	}
	return nil
}

type ExtendedTestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bool                bool                                   `protobuf:"varint,1,opt,name=bool,proto3" json:"bool,omitempty"`
	Int32               int32                                  `protobuf:"varint,2,opt,name=int32,proto3" json:"int32,omitempty"`
	Int64               int64                                  `protobuf:"varint,3,opt,name=int64,proto3" json:"int64,omitempty"`
	Uint32              uint32                                 `protobuf:"varint,4,opt,name=uint32,proto3" json:"uint32,omitempty"`
	Uint64              uint64                                 `protobuf:"varint,5,opt,name=uint64,proto3" json:"uint64,omitempty"`
	Sint32              int32                                  `protobuf:"zigzag32,6,opt,name=sint32,proto3" json:"sint32,omitempty"`
	Sint64              int64                                  `protobuf:"zigzag64,7,opt,name=sint64,proto3" json:"sint64,omitempty"`
	Fixed32             uint32                                 `protobuf:"fixed32,8,opt,name=fixed32,proto3" json:"fixed32,omitempty"`
	Fixed64             uint64                                 `protobuf:"fixed64,9,opt,name=fixed64,proto3" json:"fixed64,omitempty"`
	Float               float32                                `protobuf:"fixed32,10,opt,name=float,proto3" json:"float,omitempty"`
	Double              float64                                `protobuf:"fixed64,11,opt,name=double,proto3" json:"double,omitempty"`
	String_             string                                 `protobuf:"bytes,12,opt,name=string,proto3" json:"string,omitempty"`
	Bytes               []byte                                 `protobuf:"bytes,13,opt,name=bytes,proto3" json:"bytes,omitempty"`
	TestEnum            TestEnum                               `protobuf:"varint,14,opt,name=test_enum,json=testEnum,proto3,enum=armeria.grpc.testing.TestEnum" json:"test_enum,omitempty"`
	Nested              *ExtendedTestMessage_Nested            `protobuf:"bytes,15,opt,name=nested,proto3" json:"nested,omitempty"`
	ComplexOtherMessage *TestMessage                           `protobuf:"bytes,16,opt,name=complex_other_message,json=complexOtherMessage,proto3" json:"complex_other_message,omitempty"`
	Strings             []string                               `protobuf:"bytes,17,rep,name=strings,proto3" json:"strings,omitempty"`
	Nesteds             []*ExtendedTestMessage_Nested          `protobuf:"bytes,18,rep,name=nesteds,proto3" json:"nesteds,omitempty"`
	Selves              []*ExtendedTestMessage                 `protobuf:"bytes,19,rep,name=selves,proto3" json:"selves,omitempty"`
	StringToIntMap      map[string]int32                       `protobuf:"bytes,20,rep,name=string_to_int_map,json=stringToIntMap,proto3" json:"string_to_int_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	IntToStringMap      map[int32]string                       `protobuf:"bytes,21,rep,name=int_to_string_map,json=intToStringMap,proto3" json:"int_to_string_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MessageMap          map[string]*ExtendedTestMessage_Nested `protobuf:"bytes,22,rep,name=message_map,json=messageMap,proto3" json:"message_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SelfMap             map[string]*ExtendedTestMessage        `protobuf:"bytes,23,rep,name=self_map,json=selfMap,proto3" json:"self_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Self                *ExtendedTestMessage                   `protobuf:"bytes,24,opt,name=self,proto3" json:"self,omitempty"`
	NestedSelf          *ExtendedTestMessage_NestedSelf        `protobuf:"bytes,25,opt,name=nested_self,json=nestedSelf,proto3" json:"nested_self,omitempty"`
	NestedNestedSelf    *ExtendedTestMessage_NestedNestedSelf  `protobuf:"bytes,26,opt,name=nested_nested_self,json=nestedNestedSelf,proto3" json:"nested_nested_self,omitempty"`
}

func (x *ExtendedTestMessage) Reset() {
	*x = ExtendedTestMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendedTestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendedTestMessage) ProtoMessage() {}

func (x *ExtendedTestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendedTestMessage.ProtoReflect.Descriptor instead.
func (*ExtendedTestMessage) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{1}
}

func (x *ExtendedTestMessage) GetBool() bool {
	if x != nil {
		return x.Bool
	}
	return false
}

func (x *ExtendedTestMessage) GetInt32() int32 {
	if x != nil {
		return x.Int32
	}
	return 0
}

func (x *ExtendedTestMessage) GetInt64() int64 {
	if x != nil {
		return x.Int64
	}
	return 0
}

func (x *ExtendedTestMessage) GetUint32() uint32 {
	if x != nil {
		return x.Uint32
	}
	return 0
}

func (x *ExtendedTestMessage) GetUint64() uint64 {
	if x != nil {
		return x.Uint64
	}
	return 0
}

func (x *ExtendedTestMessage) GetSint32() int32 {
	if x != nil {
		return x.Sint32
	}
	return 0
}

func (x *ExtendedTestMessage) GetSint64() int64 {
	if x != nil {
		return x.Sint64
	}
	return 0
}

func (x *ExtendedTestMessage) GetFixed32() uint32 {
	if x != nil {
		return x.Fixed32
	}
	return 0
}

func (x *ExtendedTestMessage) GetFixed64() uint64 {
	if x != nil {
		return x.Fixed64
	}
	return 0
}

func (x *ExtendedTestMessage) GetFloat() float32 {
	if x != nil {
		return x.Float
	}
	return 0
}

func (x *ExtendedTestMessage) GetDouble() float64 {
	if x != nil {
		return x.Double
	}
	return 0
}

func (x *ExtendedTestMessage) GetString_() string {
	if x != nil {
		return x.String_
	}
	return ""
}

func (x *ExtendedTestMessage) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *ExtendedTestMessage) GetTestEnum() TestEnum {
	if x != nil {
		return x.TestEnum
	}
	return TestEnum_ZERO
}

func (x *ExtendedTestMessage) GetNested() *ExtendedTestMessage_Nested {
	if x != nil {
		return x.Nested
	}
	return nil
}

func (x *ExtendedTestMessage) GetComplexOtherMessage() *TestMessage {
	if x != nil {
		return x.ComplexOtherMessage
	}
	return nil
}

func (x *ExtendedTestMessage) GetStrings() []string {
	if x != nil {
		return x.Strings
	}
	return nil
}

func (x *ExtendedTestMessage) GetNesteds() []*ExtendedTestMessage_Nested {
	if x != nil {
		return x.Nesteds
	}
	return nil
}

func (x *ExtendedTestMessage) GetSelves() []*ExtendedTestMessage {
	if x != nil {
		return x.Selves
	}
	return nil
}

func (x *ExtendedTestMessage) GetStringToIntMap() map[string]int32 {
	if x != nil {
		return x.StringToIntMap
	}
	return nil
}

func (x *ExtendedTestMessage) GetIntToStringMap() map[int32]string {
	if x != nil {
		return x.IntToStringMap
	}
	return nil
}

func (x *ExtendedTestMessage) GetMessageMap() map[string]*ExtendedTestMessage_Nested {
	if x != nil {
		return x.MessageMap
	}
	return nil
}

func (x *ExtendedTestMessage) GetSelfMap() map[string]*ExtendedTestMessage {
	if x != nil {
		return x.SelfMap
	}
	return nil
}

func (x *ExtendedTestMessage) GetSelf() *ExtendedTestMessage {
	if x != nil {
		return x.Self
	}
	return nil
}

func (x *ExtendedTestMessage) GetNestedSelf() *ExtendedTestMessage_NestedSelf {
	if x != nil {
		return x.NestedSelf
	}
	return nil
}

func (x *ExtendedTestMessage) GetNestedNestedSelf() *ExtendedTestMessage_NestedNestedSelf {
	if x != nil {
		return x.NestedNestedSelf
	}
	return nil
}

type TestMessage_Nested struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	String_ string `protobuf:"bytes,1,opt,name=string,proto3" json:"string,omitempty"`
}

func (x *TestMessage_Nested) Reset() {
	*x = TestMessage_Nested{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestMessage_Nested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMessage_Nested) ProtoMessage() {}

func (x *TestMessage_Nested) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMessage_Nested.ProtoReflect.Descriptor instead.
func (*TestMessage_Nested) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{0, 0}
}

func (x *TestMessage_Nested) GetString_() string {
	if x != nil {
		return x.String_
	}
	return ""
}

type ExtendedTestMessage_Nested struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	String_ string `protobuf:"bytes,1,opt,name=string,proto3" json:"string,omitempty"`
}

func (x *ExtendedTestMessage_Nested) Reset() {
	*x = ExtendedTestMessage_Nested{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendedTestMessage_Nested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendedTestMessage_Nested) ProtoMessage() {}

func (x *ExtendedTestMessage_Nested) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendedTestMessage_Nested.ProtoReflect.Descriptor instead.
func (*ExtendedTestMessage_Nested) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ExtendedTestMessage_Nested) GetString_() string {
	if x != nil {
		return x.String_
	}
	return ""
}

type ExtendedTestMessage_NestedSelf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Self *ExtendedTestMessage `protobuf:"bytes,1,opt,name=self,proto3" json:"self,omitempty"`
}

func (x *ExtendedTestMessage_NestedSelf) Reset() {
	*x = ExtendedTestMessage_NestedSelf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendedTestMessage_NestedSelf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendedTestMessage_NestedSelf) ProtoMessage() {}

func (x *ExtendedTestMessage_NestedSelf) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendedTestMessage_NestedSelf.ProtoReflect.Descriptor instead.
func (*ExtendedTestMessage_NestedSelf) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{1, 1}
}

func (x *ExtendedTestMessage_NestedSelf) GetSelf() *ExtendedTestMessage {
	if x != nil {
		return x.Self
	}
	return nil
}

type ExtendedTestMessage_NestedNestedSelf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NestedSelf *ExtendedTestMessage_NestedSelf `protobuf:"bytes,1,opt,name=nested_self,json=nestedSelf,proto3" json:"nested_self,omitempty"`
}

func (x *ExtendedTestMessage_NestedNestedSelf) Reset() {
	*x = ExtendedTestMessage_NestedNestedSelf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendedTestMessage_NestedNestedSelf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendedTestMessage_NestedNestedSelf) ProtoMessage() {}

func (x *ExtendedTestMessage_NestedNestedSelf) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendedTestMessage_NestedNestedSelf.ProtoReflect.Descriptor instead.
func (*ExtendedTestMessage_NestedNestedSelf) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{1, 2}
}

func (x *ExtendedTestMessage_NestedNestedSelf) GetNestedSelf() *ExtendedTestMessage_NestedSelf {
	if x != nil {
		return x.NestedSelf
	}
	return nil
}

var File_test_proto protoreflect.FileDescriptor

var file_test_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x61, 0x72,
	0x6d, 0x65, 0x72, 0x69, 0x61, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x22, 0xa5, 0x05, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x12, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x18, 0x0a, 0x07,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x3b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x6d, 0x65, 0x72, 0x69, 0x61, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x40, 0x0a, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x61, 0x72, 0x6d, 0x65, 0x72, 0x69, 0x61, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3c, 0x0a, 0x03, 0x6d,
	0x61, 0x70, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x72, 0x6d, 0x65, 0x72,
	0x69, 0x61, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x12, 0x35, 0x0a, 0x04, 0x73, 0x65, 0x6c,
	0x66, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x6d, 0x65, 0x72, 0x69,
	0x61, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x66,
	0x1a, 0x20, 0x0a, 0x06, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x1a, 0x36, 0x0a, 0x08, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x87, 0x0f, 0x0a, 0x13, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x12, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x18, 0x0a, 0x07,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x3b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x6d, 0x65, 0x72, 0x69, 0x61, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x48, 0x0a, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x61, 0x72, 0x6d, 0x65, 0x72, 0x69, 0x61, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x54,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x52, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x55, 0x0a, 0x15, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x78, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x6d, 0x65, 0x72,
	0x69, 0x61, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x13, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x78, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x4a, 0x0a, 0x07, 0x6e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x72,
	0x6d, 0x65, 0x72, 0x69, 0x61, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x07, 0x6e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x76, 0x65, 0x73,
	0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x72, 0x6d, 0x65, 0x72, 0x69, 0x61,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x76, 0x65, 0x73, 0x12, 0x68, 0x0a, 0x11, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x72, 0x6d, 0x65, 0x72, 0x69, 0x61, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x49, 0x6e, 0x74,
	0x4d, 0x61, 0x70, 0x12, 0x68, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x61, 0x72, 0x6d, 0x65, 0x72, 0x69, 0x61, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x6f, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x69,
	0x6e, 0x74, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x12, 0x5a, 0x0a,
	0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x16, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x61, 0x72, 0x6d, 0x65, 0x72, 0x69, 0x61, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x51, 0x0a, 0x08, 0x73, 0x65, 0x6c,
	0x66, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x72,
	0x6d, 0x65, 0x72, 0x69, 0x61, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x65, 0x6c, 0x66, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x4d, 0x61, 0x70, 0x12, 0x3d, 0x0a, 0x04,
	0x73, 0x65, 0x6c, 0x66, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x72, 0x6d,
	0x65, 0x72, 0x69, 0x61, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x12, 0x55, 0x0a, 0x0b, 0x6e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x61, 0x72, 0x6d, 0x65, 0x72, 0x69, 0x61, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x53, 0x65, 0x6c, 0x66, 0x52, 0x0a, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65,
	0x6c, 0x66, 0x12, 0x68, 0x0a, 0x12, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x61, 0x72, 0x6d, 0x65, 0x72, 0x69, 0x61, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65, 0x6c, 0x66, 0x52, 0x10, 0x6e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65, 0x6c, 0x66, 0x1a, 0x20, 0x0a, 0x06,
	0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x4b,
	0x0a, 0x0a, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65, 0x6c, 0x66, 0x12, 0x3d, 0x0a, 0x04,
	0x73, 0x65, 0x6c, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x72, 0x6d,
	0x65, 0x72, 0x69, 0x61, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x1a, 0x69, 0x0a, 0x10, 0x4e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65, 0x6c, 0x66, 0x12,
	0x55, 0x0a, 0x0b, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x72, 0x6d, 0x65, 0x72, 0x69, 0x61, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65, 0x6c, 0x66, 0x52, 0x0a, 0x6e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x53, 0x65, 0x6c, 0x66, 0x1a, 0x41, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x54, 0x6f, 0x49, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x49, 0x6e, 0x74,
	0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6f, 0x0a, 0x0f,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x61, 0x72, 0x6d, 0x65, 0x72, 0x69, 0x61, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x65, 0x0a,
	0x0c, 0x53, 0x65, 0x6c, 0x66, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x61, 0x72, 0x6d, 0x65, 0x72, 0x69, 0x61, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x2a, 0x26, 0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x08, 0x0a, 0x04, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x4e,
	0x45, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x57, 0x4f, 0x10, 0x02, 0x32, 0x8e, 0x01, 0x0a,
	0x0b, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7f, 0x0a, 0x27,
	0x55, 0x6e, 0x61, 0x72, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x41, 0x6c, 0x6c,
	0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x61, 0x72, 0x6d, 0x65, 0x72, 0x69,
	0x61, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x29, 0x2e, 0x61, 0x72, 0x6d, 0x65, 0x72, 0x69, 0x61, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x47, 0x5a,
	0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x75, 0x72, 0x69,
	0x6f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2f, 0x67, 0x6f, 0x2d, 0x64, 0x6f, 0x63, 0x73, 0x2d,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_test_proto_rawDescOnce sync.Once
	file_test_proto_rawDescData = file_test_proto_rawDesc
)

func file_test_proto_rawDescGZIP() []byte {
	file_test_proto_rawDescOnce.Do(func() {
		file_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_test_proto_rawDescData)
	})
	return file_test_proto_rawDescData
}

var file_test_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_test_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_test_proto_goTypes = []interface{}{
	(TestEnum)(0),                                // 0: armeria.grpc.testing.TestEnum
	(*TestMessage)(nil),                          // 1: armeria.grpc.testing.TestMessage
	(*ExtendedTestMessage)(nil),                  // 2: armeria.grpc.testing.ExtendedTestMessage
	(*TestMessage_Nested)(nil),                   // 3: armeria.grpc.testing.TestMessage.Nested
	nil,                                          // 4: armeria.grpc.testing.TestMessage.MapEntry
	(*ExtendedTestMessage_Nested)(nil),           // 5: armeria.grpc.testing.ExtendedTestMessage.Nested
	(*ExtendedTestMessage_NestedSelf)(nil),       // 6: armeria.grpc.testing.ExtendedTestMessage.NestedSelf
	(*ExtendedTestMessage_NestedNestedSelf)(nil), // 7: armeria.grpc.testing.ExtendedTestMessage.NestedNestedSelf
	nil, // 8: armeria.grpc.testing.ExtendedTestMessage.StringToIntMapEntry
	nil, // 9: armeria.grpc.testing.ExtendedTestMessage.IntToStringMapEntry
	nil, // 10: armeria.grpc.testing.ExtendedTestMessage.MessageMapEntry
	nil, // 11: armeria.grpc.testing.ExtendedTestMessage.SelfMapEntry
}
var file_test_proto_depIdxs = []int32{
	0,  // 0: armeria.grpc.testing.TestMessage.test_enum:type_name -> armeria.grpc.testing.TestEnum
	3,  // 1: armeria.grpc.testing.TestMessage.nested:type_name -> armeria.grpc.testing.TestMessage.Nested
	4,  // 2: armeria.grpc.testing.TestMessage.map:type_name -> armeria.grpc.testing.TestMessage.MapEntry
	1,  // 3: armeria.grpc.testing.TestMessage.self:type_name -> armeria.grpc.testing.TestMessage
	0,  // 4: armeria.grpc.testing.ExtendedTestMessage.test_enum:type_name -> armeria.grpc.testing.TestEnum
	5,  // 5: armeria.grpc.testing.ExtendedTestMessage.nested:type_name -> armeria.grpc.testing.ExtendedTestMessage.Nested
	1,  // 6: armeria.grpc.testing.ExtendedTestMessage.complex_other_message:type_name -> armeria.grpc.testing.TestMessage
	5,  // 7: armeria.grpc.testing.ExtendedTestMessage.nesteds:type_name -> armeria.grpc.testing.ExtendedTestMessage.Nested
	2,  // 8: armeria.grpc.testing.ExtendedTestMessage.selves:type_name -> armeria.grpc.testing.ExtendedTestMessage
	8,  // 9: armeria.grpc.testing.ExtendedTestMessage.string_to_int_map:type_name -> armeria.grpc.testing.ExtendedTestMessage.StringToIntMapEntry
	9,  // 10: armeria.grpc.testing.ExtendedTestMessage.int_to_string_map:type_name -> armeria.grpc.testing.ExtendedTestMessage.IntToStringMapEntry
	10, // 11: armeria.grpc.testing.ExtendedTestMessage.message_map:type_name -> armeria.grpc.testing.ExtendedTestMessage.MessageMapEntry
	11, // 12: armeria.grpc.testing.ExtendedTestMessage.self_map:type_name -> armeria.grpc.testing.ExtendedTestMessage.SelfMapEntry
	2,  // 13: armeria.grpc.testing.ExtendedTestMessage.self:type_name -> armeria.grpc.testing.ExtendedTestMessage
	6,  // 14: armeria.grpc.testing.ExtendedTestMessage.nested_self:type_name -> armeria.grpc.testing.ExtendedTestMessage.NestedSelf
	7,  // 15: armeria.grpc.testing.ExtendedTestMessage.nested_nested_self:type_name -> armeria.grpc.testing.ExtendedTestMessage.NestedNestedSelf
	2,  // 16: armeria.grpc.testing.ExtendedTestMessage.NestedSelf.self:type_name -> armeria.grpc.testing.ExtendedTestMessage
	6,  // 17: armeria.grpc.testing.ExtendedTestMessage.NestedNestedSelf.nested_self:type_name -> armeria.grpc.testing.ExtendedTestMessage.NestedSelf
	5,  // 18: armeria.grpc.testing.ExtendedTestMessage.MessageMapEntry.value:type_name -> armeria.grpc.testing.ExtendedTestMessage.Nested
	2,  // 19: armeria.grpc.testing.ExtendedTestMessage.SelfMapEntry.value:type_name -> armeria.grpc.testing.ExtendedTestMessage
	2,  // 20: armeria.grpc.testing.TestService.UnaryCallWithAllDifferentParameterTypes:input_type -> armeria.grpc.testing.ExtendedTestMessage
	2,  // 21: armeria.grpc.testing.TestService.UnaryCallWithAllDifferentParameterTypes:output_type -> armeria.grpc.testing.ExtendedTestMessage
	21, // [21:22] is the sub-list for method output_type
	20, // [20:21] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_test_proto_init() }
func file_test_proto_init() {
	if File_test_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_test_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtendedTestMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestMessage_Nested); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtendedTestMessage_Nested); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtendedTestMessage_NestedSelf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtendedTestMessage_NestedNestedSelf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_test_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_test_proto_goTypes,
		DependencyIndexes: file_test_proto_depIdxs,
		EnumInfos:         file_test_proto_enumTypes,
		MessageInfos:      file_test_proto_msgTypes,
	}.Build()
	File_test_proto = out.File
	file_test_proto_rawDesc = nil
	file_test_proto_goTypes = nil
	file_test_proto_depIdxs = nil
}
