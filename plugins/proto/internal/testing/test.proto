// Copyright 2017 LINE Corporation
//
// LINE Corporation licenses this file to you under the Apache License,
// version 2.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at:
//
//   https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.

// Copyright 2015, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

package armeria.grpc.testing;

option go_package = "github.com/curioswitch/go-docs-handler/plugins/proto/internal/testing";

enum TestEnum {
  ZERO = 0;
  ONE = 1;
  TWO = 2;
}

message TestMessage {
  message Nested {
    string string = 1;
  }

  bool bool = 1;
  int32 int32 = 2;
  int64 int64 = 3;
  uint32 uint32 = 4;
  uint64 uint64 = 5;
  sint32 sint32 = 6;
  sint64 sint64 = 7;
  fixed32 fixed32 = 8;
  fixed64 fixed64 = 9;
  float float = 10;
  double double = 11;
  string string = 12;
  bytes bytes = 13;
  TestEnum test_enum = 14;
  Nested nested = 15;
  repeated string strings = 16;
  map<string, int32> map = 17;
  TestMessage self = 18;
}

message ExtendedTestMessage {
  message Nested {
    string string = 1;
  }

  message NestedSelf {
    ExtendedTestMessage self = 1;
  }

  message NestedNestedSelf {
    NestedSelf nested_self = 1;
  }

  bool bool = 1;
  int32 int32 = 2;
  int64 int64 = 3;
  uint32 uint32 = 4;
  uint64 uint64 = 5;
  sint32 sint32 = 6;
  sint64 sint64 = 7;
  fixed32 fixed32 = 8;
  fixed64 fixed64 = 9;
  float float = 10;
  double double = 11;
  string string = 12;
  bytes bytes = 13;
  TestEnum test_enum = 14;
  Nested nested = 15;
  TestMessage complex_other_message = 16;
  repeated string strings = 17;
  repeated Nested nesteds = 18;
  repeated ExtendedTestMessage selves = 19;
  map<string, int32> string_to_int_map = 20;
  map<int32, string> int_to_string_map = 21;
  map<string, Nested> message_map = 22;
  map<string, ExtendedTestMessage> self_map = 23;
  ExtendedTestMessage self = 24;
  NestedSelf nested_self = 25;
  NestedNestedSelf nested_nested_self = 26;
}

// A simple service to test the various types of RPCs and experiment with
// performance with various types of payload.
service TestService {
  // This method's parameter message contains all different types of parameters
  // as well as the response type contains all different types of parameters.
  // Can be used to check any kind of serialization issues.
  rpc UnaryCallWithAllDifferentParameterTypes(ExtendedTestMessage) returns (ExtendedTestMessage);
}
